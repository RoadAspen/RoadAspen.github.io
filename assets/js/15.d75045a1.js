(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{379:function(t,a,s){"use strict";s.r(a);var r=s(24),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法图解"}},[t._v("#")]),t._v(" 算法图解")]),t._v(" "),s("p",[s("strong",[t._v("算法是一组完成任务的指令，任何代码片段都可视为算法。")])]),t._v(" "),s("p",[t._v("本系列通过研读《算法图解》这本书作出的笔记及相关设想，相关代码实现有 Python 和 Javascript 两种语言的实例。")]),t._v(" "),s("blockquote",[s("p",[t._v("设计出数据结构， 在施加以算法就行了。")])]),t._v(" "),s("p",[t._v("算法图解 通过图形化的方式，通俗易懂的讲述算法入门。")]),t._v(" "),s("h2",{attrs:{id:"大-o-表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大-o-表示法"}},[t._v("#")]),t._v(" 大 O 表示法")]),t._v(" "),s("p",[t._v("用大 O 表示法来分析算法的速度。 在选择算法时，应该选择效率最高的算法，以最大限度的减少运行时间或占用空间。")]),t._v(" "),s("h2",{attrs:{id:"数组和链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组和链表"}},[t._v("#")]),t._v(" 数组和链表")]),t._v(" "),s("p",[t._v("数组和链表这两种数据结构贯穿整个算法过程，还可以被用来创建更高级的数据结构。")]),t._v(" "),s("h2",{attrs:{id:"递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),s("p",[t._v("一种被众多算法采用的使用技巧。")]),t._v(" "),s("h2",{attrs:{id:"问题解决技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题解决技巧"}},[t._v("#")]),t._v(" 问题解决技巧")]),t._v(" "),s("p",[t._v("遇到问题，如果不确定该如何高效的解决，可尝试 "),s("code",[t._v("分而治之")]),t._v(" 或者 "),s("code",[t._v("动态规划")]),t._v("。 如果认识到根本没有高效的解决方案，可转而使用 "),s("code",[t._v("贪心算法")]),t._v("得到近似答案。")]),t._v(" "),s("h2",{attrs:{id:"散列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表"}},[t._v("#")]),t._v(" 散列表")]),t._v(" "),s("p",[t._v("散列表是一种很有用的数据结构，由键值对组成，如人命和电子邮件地址或者用户名和密码。散列表的用途之大，再怎么强调也不过分。每当需要解决问题时，首先想到的两种方法是：可使用散列表吗？可以使用图来建立模型吗？")]),t._v(" "),s("h2",{attrs:{id:"图算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图算法"}},[t._v("#")]),t._v(" 图算法")]),t._v(" "),s("p",[t._v("图是模拟网络的方法，这种网包括人际关系网、公路网、神经元网络或者任何一组连接。广度优先搜索和迪克斯特拉算法计算网络中两点之间的最短距离，可用于计算两人间的分隔度或者前往目的地的最短路径。")]),t._v(" "),s("h2",{attrs:{id:"k-最近邻算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#k-最近邻算法"}},[t._v("#")]),t._v(" K 最近邻算法")]),t._v(" "),s("p",[t._v("这是一种简单的机器学习算法")])])}),[],!1,null,null,null);a.default=v.exports}}]);