(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{458:function(s,a,t){"use strict";t.r(a);var e=t(24),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"interface-vs-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interface-vs-class"}},[s._v("#")]),s._v(" interface vs class")]),s._v(" "),t("p",[s._v("接口和类都是对一类事物的抽象表示。")]),s._v(" "),t("h2",{attrs:{id:"interface-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interface-是什么"}},[s._v("#")]),s._v(" interface 是什么")]),s._v(" "),t("p",[s._v("在 OOP 语言中， 接口（interface） 是一个很重要的概念，它是对行为的抽象。 而具体的行为表现需要由类（calss）去实现（implements）。")]),s._v(" "),t("p",[s._v("在 Typescript 中， 接口是一个非常灵活的概念， 除了可用于对类的一部分行为进行抽象以外，也常用于描述对象的形状。")]),s._v(" "),t("div",{staticClass:"language-ts line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"class-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-是什么"}},[s._v("#")]),s._v(" class 是什么")]),s._v(" "),t("p",[s._v("在 class 之前， JS 是通过构造函数实现一个类，通过原型链去实现继承，class 是一个 ES6 出现的用来描述类的概念，\ntypescript 在原先 class 的功能以外，还添加了一些新的用法。")]),s._v(" "),t("h2",{attrs:{id:"相同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[s._v("#")]),s._v(" 相同点")]),s._v(" "),t("h2",{attrs:{id:"不同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[s._v("#")]),s._v(" 不同点")]),s._v(" "),t("h2",{attrs:{id:"抽象类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),t("p",[s._v("抽象类是对类更高一层级的抽象，不能被实例化， 抽象方法也不能直接实现。 更倾向于一个事物的本质，如定义一个所有类都存在的方法，但是具体实现交给子类完成。")])])}),[],!1,null,null,null);a.default=r.exports}}]);