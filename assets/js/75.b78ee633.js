(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{437:function(t,a,s){"use strict";s.r(a);var e=s(24),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),s("blockquote",[s("p",[t._v("浏览器基于同源策略安全机制，从 http 协议、域名、端口号这三个方面不同的 url 启用跨域限制，主要限制在 ajax 操作，cookie，storage 读取，DOM 操作上。主要在于禁止 js 通过 ajax 获取服务器返回的信息。")])]),t._v(" "),s("h2",{attrs:{id:"不受跨域策略影响的操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不受跨域策略影响的操作"}},[t._v("#")]),t._v(" 不受跨域策略影响的操作")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("form action")]),t._v("提交。")]),t._v(" "),s("blockquote",[s("p",[t._v("由于 form 的 action 指向后台地址，所以在表单提交之后会导致页面刷新或者页面跳转直接返回 html，所以 js 是拿不到后台返回的数据的，所以浏览器不对 form 提交操作启用同源策略。")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("img")]),t._v(" "),s("code",[t._v("script")]),t._v(" "),s("code",[t._v("link")])]),t._v(" "),s("blockquote",[s("p",[t._v("这三个标签的资源引用全部为 get 请求，且属于 html 标签，不属于通过 js 发起的 get 请求，所以不适用于同源策略。")])])])]),t._v(" "),s("h2",{attrs:{id:"跨域的触发途径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域的触发途径"}},[t._v("#")]),t._v(" 跨域的触发途径")]),t._v(" "),s("ol",[s("li",[t._v("http 协议不同，如一个是 https 协议，一个是 http 协议。")]),t._v(" "),s("li",[t._v("域名不同，如 一个是 www.baidu.com 另一个是 www.baidu.com")]),t._v(" "),s("li",[t._v("端口不同，如 http://www.baidu.com 默认是 80 端口，另一个http://www.baidu.com:8000")]),t._v(" "),s("li",[t._v("主域相同，子域不同，如 一个是 http://www.baidu.com ,另一个是 http://damian.baidu.com\n"),s("blockquote",[s("p",[t._v("以上几种情况的通信都会受到同源策略的影响。")])])])]),t._v(" "),s("h2",{attrs:{id:"跨域的解决方案-共-9-种。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跨域的解决方案-共-9-种。"}},[t._v("#")]),t._v(" 跨域的解决方案，共 9 种。")]),t._v(" "),s("h3",{attrs:{id:"一、jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、jsonp"}},[t._v("#")]),t._v(" 一、JSONP")]),t._v(" "),s("blockquote",[s("p",[t._v("这个是之前用的最多的，只支持 get 方式的请求，创建一个 script 标签，然后 src 设置为服务端的资源，将 script 变迁添加进 html 的 body 中。")])]),t._v(" "),s("p",[s("code",[t._v("jsonp")]),t._v(" json with padding，利用 script 不受同源策略影响的特性，通过 script 的 src 属性请求服务器，服务器通过把数据放在 js 文件中的方式返回给浏览器。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://domain.cdn.com?callback=callback"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"二、-跨域资源共享-cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、-跨域资源共享-cors"}},[t._v("#")]),t._v(" 二、 跨域资源共享（cors）")]),t._v(" "),s("blockquote",[s("p",[t._v("通过 ajax 发起 http 请求，cors 需要浏览器和服务器同时支持。在 header 中添加一个 Origin 字段，说明本次请求来自哪个源（协议+域名+端口）。服务端根据这个值决定是否同意这个请求，在返回的 header 中 添加 Access-Control-Allow-Origin 字段，字段值可能是 1、* 代表 允许所有域的请求；2、请求中的 Origin 字段值，表示只允许当前域可以跨域请求该资源。")])]),t._v(" "),s("p",[t._v("cors 请求又分为 简单请求和非简单请求两种情况。")]),t._v(" "),s("h4",{attrs:{id:"简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[t._v("#")]),t._v(" 简单请求")]),t._v(" "),s("p",[t._v("满足以下两点就可以称为简单请求。")]),t._v(" "),s("ol",[s("li",[t._v("使用以下方法之一。\n"),s("ul",[s("li",[t._v("get")]),t._v(" "),s("li",[t._v("post")]),t._v(" "),s("li",[t._v("head")])])]),t._v(" "),s("li",[t._v("请求的 header 中 Content-type 限定于三个值：")])]),t._v(" "),s("ul",[s("li",[t._v("application/x-www-form-urlencoded")]),t._v(" "),s("li",[t._v("multipart/form-data")]),t._v(" "),s("li",[t._v("text/plain。")])]),t._v(" "),s("p",[t._v("同时满足上面的两个条件，就属于简单请求。")]),t._v(" "),s("blockquote",[s("p",[t._v("简单请求，浏览器直接发出 CORS 请求，在 header 中增加 Origin 字段，服务器根据这个值决定是否允许这个请求。CORS 请求设置的响应头字段，都以 Access-Control-开头。")])]),t._v(" "),s("h4",{attrs:{id:"非简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[t._v("#")]),t._v(" 非简单请求")]),t._v(" "),s("p",[t._v("请求方法是 put、delete、patch 之一或者 content-type 是 application/json ，这个请求就是非简单请求。")]),t._v(" "),s("p",[t._v("非简单请求会在正式请求发起前发起一个预检请求，预检请求使用 Options 请求，服务器检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。浏览器会缓存这次请求，避免一段时间内跨域时再次发送预检请求，此请求需要服务器支持，否则服务器会报不支持 options 方法的错误。")]),t._v(" "),s("h3",{attrs:{id:"postmessage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[t._v("#")]),t._v(" postMessage")]),t._v(" "),s("p",[s("strong",[t._v("postMessage")]),t._v(" 是 HTML5 XMLHttpRequest Level 2 中的 API，")]),t._v(" "),s("h3",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" websocket")]),t._v(" "),s("p",[s("strong",[t._v("websocket")]),t._v(" 是")]),t._v(" "),s("h3",{attrs:{id:"node-中间层代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-中间层代理"}},[t._v("#")]),t._v(" node 中间层代理")]),t._v(" "),s("p",[t._v("node 建立中间层， 前端访问 node，不需要代理， node 访问 后端不需要跨域， 相当于做了一次接口转发。")]),t._v(" "),s("h3",{attrs:{id:"nginx-反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理"}},[t._v("#")]),t._v(" nginx 反向代理")]),t._v(" "),s("p",[t._v("nginx 反向代理，浏览器访问 nginx，nginx 接受并转发到后端，避免了跨域。")]),t._v(" "),s("h3",{attrs:{id:"window-name-iframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window-name-iframe"}},[t._v("#")]),t._v(" window.name + iframe")]),t._v(" "),s("h3",{attrs:{id:"location-hash-iframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#location-hash-iframe"}},[t._v("#")]),t._v(" location.hash + iframe")]),t._v(" "),s("h3",{attrs:{id:"document-domain-iframe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#document-domain-iframe"}},[t._v("#")]),t._v(" document.domain + iframe")])])}),[],!1,null,null,null);a.default=r.exports}}]);