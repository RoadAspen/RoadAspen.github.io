(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{365:function(s,t,a){s.exports=a.p+"assets/img/zhenzhixing.591da4ae.png"},366:function(s,t,a){s.exports=a.p+"assets/img/fiberdiaodu.c9faee6c.png"},367:function(s,t,a){s.exports=a.p+"assets/img/workLoop.25b47dfc.png"},368:function(s,t,a){s.exports=a.p+"assets/img/fiber.016fb5d7.png"},543:function(s,t,a){"use strict";a.r(t);var n=a(24),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"reactfiber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reactfiber"}},[s._v("#")]),s._v(" ReactFiber")]),s._v(" "),n("p",[n("code",[s._v("Fiber 数据结构")]),s._v(" + "),n("code",[s._v("算法")]),s._v(" = "),n("code",[s._v("Fiber架构")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"为什么要有-fiber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有-fiber"}},[s._v("#")]),s._v(" 为什么要有 Fiber")]),s._v(" "),n("p",[s._v("javascript 引擎是在"),n("strong",[s._v("单线程")]),s._v("运行的。严格来讲，"),n("strong",[s._v("js 引擎和页面渲染引擎在同一个渲染线程， GUI 渲染和 JS 执行是互斥的。")]),n("br"),s._v(" "),n("strong",[s._v("React V15 在更新时，会递归对比 VirtualDOM 树，找出需要变动的节点，然后同步更新它们，一气呵成。这个过程在 React 中被称为 Reconciliation (协调)")]),s._v("，协调 是一个很耗时的 CPU 密集型操作，在协调期间，React 会一直占用 CPU 资源，导致以下问题：")]),s._v(" "),n("ol",[n("li",[s._v("用户触发的事件得不到响应")]),s._v(" "),n("li",[s._v("GUI 渲染延迟，导致页面掉帧，用户感觉页面卡顿。")])]),s._v(" "),n("p",[s._v("因此 React 团队在 V16 版本中引入了 "),n("code",[s._v("Fiber 架构")]),s._v("， 通过 "),n("code",[s._v("Fiber 架构")]),s._v(" ，将 "),n("code",[s._v("Reconciliation")]),s._v(" 过程 变为"),n("strong",[s._v("可被中断")]),s._v("。‘适时’的让出 CPU 执行权，除了让浏览器及时的响应用户的交互，还有其它好处：")]),s._v(" "),n("ol",[n("li",[s._v("与其一次性操作大量 DOM 节点相比, 分批延时对 DOM 进行操作，可以得到更好的用户体验。")]),s._v(" "),n("li",[s._v("给浏览器一点喘息的机会，他会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正.")])]),s._v(" "),n("h2",{attrs:{id:"何为-fiber"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何为-fiber"}},[s._v("#")]),s._v(" 何为 Fiber")]),s._v(" "),n("p",[s._v("对于 React 来讲，Fiber 可以从两个角度理解：")]),s._v(" "),n("h3",{attrs:{id:"_1-一种流程控制语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-一种流程控制语句"}},[s._v("#")]),s._v(" 1. 一种流程控制语句")]),s._v(" "),n("p",[s._v("Fiber 也称为 "),n("code",[s._v("协程")]),s._v(",与线程不同，是一种控制流程的让出机制。类似于 "),n("code",[s._v("Generator")]),s._v(" 函数：")]),s._v(" "),n("p",[s._v("普通的函数在执行过程中 不能被"),n("strong",[s._v("中断和恢复")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" tasks "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tasks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("shift")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("而 "),n("code",[s._v("Generator")]),s._v("可以：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" tasks "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" task"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tasks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("shift")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断是否有高优先级事件需要处理, 有的话让出控制权")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasHighPriorityEvent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理完高优先级事件后，恢复函数调用栈，继续执行...")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("React Fiber 的思想和 协程的概念是相契合的："),n("strong",[s._v("React 渲染的过程可以被中断，可以将控制权交回给浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。")])]),s._v(" "),n("ol",[n("li",[s._v("React Fiber 采用了主动让出机制。")]),s._v(" "),n("li",[s._v("通过 requestIdleCallback API 来决定是否交出控制权。"),n("code",[s._v("requestIdleCallback")]),s._v(" 的意思是指"),n("strong",[s._v("让浏览器有空的时候就执行我们的回调，这个回调会传入一个期限，表示浏览器有多少时间供我们执行，为了不耽误事，我们最好在这个时间范围内执行完毕")])])]),s._v(" "),n("p",[s._v("一般情况下浏览器的刷新频率是 60HZ，那么一帧的时间就是大约 16ms。浏览器在一帧内会做哪些事情：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(365),alt:"帧执行"}})]),s._v(" "),n("ol",[n("li",[s._v("处理用户输入事件。")]),s._v(" "),n("li",[s._v("javascript 执行。")]),s._v(" "),n("li",[s._v("requestAnimationFrame 调用。")]),s._v(" "),n("li",[s._v("布局 Layout。")]),s._v(" "),n("li",[s._v("绘制 Point。")]),s._v(" "),n("li",[s._v("requestIdleCallback （是否剩余时间）")])]),s._v(" "),n("p",[s._v("如果浏览器处理完上述事情之后还有剩余的时间，那么浏览器就会调用 "),n("code",[s._v("requestIdleCallback")]),s._v("回调。")]),s._v(" "),n("p",[n("strong",[s._v("但是在浏览器繁忙的时候，可能不会有盈余时间，这时候 "),n("code",[s._v("requestIdleCallback")]),s._v(" 回调可能就不会被执行。 为了避免饿死，可以通过 "),n("code",[s._v("requestIdleCallback")]),s._v(" 的第二个参数指定一个超时时间。")])]),s._v(" "),n("h4",{attrs:{id:"任务优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务优先级"}},[s._v("#")]),s._v(" 任务优先级")]),s._v(" "),n("p",[s._v("为了避免任务被饿死，可以设置一个超时时间. "),n("strong",[s._v("这个超时时间不是死的，低优先级的可以慢慢等待, 高优先级的任务应该率先被执行")]),s._v(". 目前 React 预定义了 5 个优先级:")]),s._v(" "),n("ul",[n("li",[s._v("Immediate(-1) - 这个优先级的任务会"),n("strong",[s._v("同步执行")]),s._v(", 或者说要"),n("strong",[s._v("马上执行且不能中断")])]),s._v(" "),n("li",[s._v("UserBlocking(250ms) 这些任务一般是用户交互的结果, "),n("strong",[s._v("需要即时得到反馈")])]),s._v(" "),n("li",[s._v("Normal (5s) 应对哪些"),n("strong",[s._v("不需要立即感受到的任务，例如网络请求")])]),s._v(" "),n("li",[s._v("Low (10s) "),n("strong",[s._v("这些任务可以放后，但是最终应该得到执行")]),s._v(". 例如分析通知")]),s._v(" "),n("li",[s._v("Idle (没有超时时间) 一些没有必要做的任务 (e.g. 比如隐藏的内容), 可能会被饿死")])]),s._v(" "),n("h3",{attrs:{id:"_2-一个执行单元"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-一个执行单元"}},[s._v("#")]),s._v(" 2. 一个执行单元")]),s._v(" "),n("p",[s._v("Fiber 的另外一种解读是’纤维‘: 这是一种数据结构或者说执行单元。将它视作一个执行单元，每次执行完一个'执行单元', React 就会检查现在还剩多少时间，如果没有时间就将控制权让出去.交互流程如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(366),alt:"fiber调度"}})]),s._v(" "),n("p",[s._v("假设用户调用 "),n("code",[s._v("setState")]),s._v(" 更新组建，这个带更新的任务会先放入队列中，然后通过 "),n("code",[s._v("requestIdleCallback")]),s._v("请求浏览器调度。")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("updateQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updateTask"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("requestIdleCallback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("performWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" timeout "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("现在浏览器有空闲或者超时了，就会调用 "),n("code",[s._v("performWork")]),s._v(" 来执行任务：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1️⃣ performWork 会拿到一个Deadline，表示剩余时间")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("deadline")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2️⃣ 循环取出updateQueue中的任务")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updateQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" deadline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeRemaining")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ENOUGH_TIME")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("deadline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3️⃣ 如果在本次执行中，未能将所有任务执行完毕，那就再请求浏览器调度")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("updateQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("requestIdleCallback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("performWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("code",[s._v("workLoop")]),s._v(" 的工作大概猜到了，他就是从 更新队列中 获取更新任务来执行，每执行完一个"),n("code",[s._v("执行单元")]),s._v("，就检查一下剩余时间是否充足，如果充足就继续执行下一个"),n("code",[s._v("执行单元")]),s._v("，否则就交出控制权，保存现场，并请求下一次执行权限：")]),s._v(" "),n("div",{staticClass:"language-typescript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-typescript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存当前的处理现场")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" nextUnitOfWork"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存下一个需要处理的工作单元")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" topWork"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存第一个工作单元")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("workLoop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("deadline"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" IdleDeadline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// updateQueue中获取下一个或者恢复上一次中断的执行单元")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nextUnitOfWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    nextUnitOfWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" topWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getNextUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 🔴 每执行完一个执行单元，检查一次剩余时间")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果被中断，下一次执行还是从 nextUnitOfWork 开始处理")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nextUnitOfWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" deadline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("timeRemaining")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ENOUGH_TIME")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下文我们再看performUnitOfWork")]),s._v("\n    nextUnitOfWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nextUnitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" topWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 提交工作，下文会介绍")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pendingCommit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("commitAllWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pendingCommit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("流程图如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(367),alt:""}})]),s._v(" "),n("h3",{attrs:{id:"_3-数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据结构"}},[s._v("#")]),s._v(" 3. 数据结构")]),s._v(" "),n("p",[s._v("为了配合 "),n("code",[s._v("Reconciliation")]),s._v(" 的可中断和可恢复操作。Fiber 采用了 "),n("code",[s._v("单向链表")]),s._v("， "),n("strong",[s._v("每个 VirtualDOM 节点内部现在使用 "),n("code",[s._v("Fiber")]),s._v(" 表示")]),s._v("，结构如下：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" type Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fiber 类型信息")]),s._v("\n  type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ⚛️ 链表结构")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向父节点，或者render该节点的组件")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向第一个子节点")]),s._v("\n  child"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向下一个兄弟节点")]),s._v("\n  sibling"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("用图片展示这个关系：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(368),alt:""}})]),s._v(" "),n("p",[s._v("有了这个数据结构调整，现在可以以迭代的方式来处理这些节点了。来看看 "),n("code",[s._v("performUnitOfWork")]),s._v(" (执行工作单元) 的实现, 它其实就是一个深度优先的遍历：")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * @params fiber 当前需要处理的节点\n * @params topWork 本次更新的根节点\n *\n * 执行一个fiber，返回下一个fiber\n */")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("performUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("fiber"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" topWork"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Fiber")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对该节点进行处理")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("beginWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果存在子节点，那么下一个待处理的就是子节点")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有子节点了，上溯查找兄弟节点")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("completeWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 到顶层节点了, 退出")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" topWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到，下一个要处理的就是兄弟节点")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sibling"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sibling"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 没有, 继续上溯")]),s._v("\n    temp "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" temp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("return"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("p",[s._v("你可以配合上文的 "),n("code",[s._v("workLoop")]),s._v(" 一起看，Fiber 就是我们所说的工作单元，"),n("code",[s._v("performUnitOfWork")]),s._v(" 负责对 "),n("code",[s._v("Fiber")]),s._v(" 进行操作，并按照深度遍历的顺序返回下一个 "),n("code",[s._v("Fiber")]),s._v(".")]),s._v(" "),n("p",[s._v("因为使用了链表结构，即使处理流程被中断了，我们随时可以从上次未处理完的 "),n("code",[s._v("Fiber")]),s._v(" 继续遍历下去。")]),s._v(" "),n("h2",{attrs:{id:"fiber-执行原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fiber-执行原理"}},[s._v("#")]),s._v(" Fiber 执行原理")]),s._v(" "),n("p",[s._v("从根节点开始渲染和调度的过程可以分为两个阶段：render 阶段、commit 阶段。")]),s._v(" "),n("ul",[n("li",[s._v("render 阶段： 这个阶段是可中断的，会找出所有节点的变更。")]),s._v(" "),n("li",[s._v("commit 阶段：这个阶段是不可中断的，会执行所有的变更。")])]),s._v(" "),n("p",[n("strong",[s._v("还需要了解以下几个名词：")])]),s._v(" "),n("ol",[n("li",[n("code",[s._v("RootFiber")]),s._v(" 不是 Fiber， 但有一个 current 属性指向 "),n("code",[s._v("workInProgress")])]),s._v(" "),n("li",[n("code",[s._v("currentFiber 树")]),s._v(" 首次渲染之后，React 会生成一个对应于 UI 渲染的 fiber 树，称之为 current 树。在新一轮更新时 workInProgress tree 再重新构建，新 workInProgress 的节点通过 alternate 属性和 currentFiber 的节点建立联系。")]),s._v(" "),n("li",[n("code",[s._v("WorkInProgress 树")]),s._v(" 代表当前正在执行更新的 Fiber 树。setState 后会生成新的 WorkInProgress。 每一个节点保存的都是新的 fiber 节点。")]),s._v(" "),n("li",[n("code",[s._v("Effect List")]),s._v(" 可以理解为是一个存储 effect 副作用列表容器.")])]),s._v(" "),n("p",[n("strong",[s._v("currentFiber 和 WorkInProgress 双缓存技术， 减少内存分配和 gc。")])]),s._v(" "),n("h3",{attrs:{id:"render-协调阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render-协调阶段"}},[s._v("#")]),s._v(" render 协调阶段")]),s._v(" "),n("p",[s._v("此阶段会找出所有节点的变更，如节点新增、删除、属性变更等，这些变更被 react 统称为 "),n("code",[s._v("副作用（Effect")]),s._v("），此阶段会构建一棵新的 fiber tree ，即 "),n("code",[s._v("workInProgress")]),s._v(" 树，以虚拟节点为维度对任务进行拆分，即一个"),n("code",[s._v("虚拟DOM节点")]),s._v("对应一个"),n("code",[s._v("任务")]),s._v("。最后产出的结果是 "),n("code",[s._v("effect list")]),s._v(",从中可以知道那些节点更新、增加、删除。")]),s._v(" "),n("h4",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),n("p",[s._v("render 阶段的生命周期：")]),s._v(" "),n("ul",[n("li",[s._v("getDerivedStateFromProps")]),s._v(" "),n("li",[s._v("shouldComponentUpdate")]),s._v(" "),n("li",[s._v("render")])]),s._v(" "),n("h4",{attrs:{id:"遍历流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遍历流程"}},[s._v("#")]),s._v(" 遍历流程")]),s._v(" "),n("p",[n("code",[s._v("React Fiber")]),s._v(" 首先将 虚拟 DOM 转化为 "),n("code",[s._v("Fiber tree")]),s._v(", 因此每个节点都有 "),n("code",[s._v("child")]),s._v(" 、"),n("code",[s._v("sibling")]),s._v(" 、"),n("code",[s._v("return")])]),s._v(" "),n("p",[n("strong",[s._v("遍历 Fiber tree 时采用的是后序遍历方法:")])]),s._v(" "),n("ul",[n("li",[s._v("从顶部开始遍历")]),s._v(" "),n("li",[s._v("如果有 child 节点，且还未遍历，遍历 child 节点")]),s._v(" "),n("li",[s._v("如果没有 child 节点，返回父节点")]),s._v(" "),n("li",[s._v("如果有 child 节点，且已经遍历过，则遍历 sibling 节点。")]),s._v(" "),n("li",[s._v("如果最后返回的节点为顶部，表示所有节点遍历完成。")])]),s._v(" "),n("p",[s._v("每个 Fiber 上都有个 "),n("code",[s._v("alternate")]),s._v(" 属性,指向一个 current Fiber 树 的 fiber,创建 "),n("code",[s._v("WorkInProgress")]),s._v(" 节点时优先取 "),n("code",[s._v("alternate")]),s._v(",没有的话就创建一个。")]),s._v(" "),n("h4",{attrs:{id:"收集-effect-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#收集-effect-list"}},[s._v("#")]),s._v(" 收集 effect list")]),s._v(" "),n("h3",{attrs:{id:"commit-提交阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commit-提交阶段"}},[s._v("#")]),s._v(" commit 提交阶段")]),s._v(" "),n("p",[s._v("这个阶段是同步的，一气呵成，不会被中断。 根据 "),n("code",[s._v("effect list")]),s._v(" 去更新试图。")]),s._v(" "),n("h4",{attrs:{id:"生命周期-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-2"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("getSnapshotBeforeUpdate")])]),s._v(" "),n("li",[n("p",[s._v("componentDidMount")])]),s._v(" "),n("li",[n("p",[s._v("componentDidUpdate")])]),s._v(" "),n("li",[n("p",[s._v("componentWillUnmount")]),s._v(" "),n("p",[s._v("由于这些方法在提交阶段被调用，因此它们可能包含任何副作用和 DOM 操作。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);