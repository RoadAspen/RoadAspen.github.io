(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{461:function(t,a,v){"use strict";v.r(a);var _=v(24),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"web-安全"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#web-安全"}},[t._v("#")]),t._v(" web 安全")]),t._v(" "),v("p",[t._v("对 web 浏览器访问服务端做出干扰用户操作、获取用户信息、假装用户操作、操作数据库等行为，提高 web 安全防护知识，有助于做出更好的 web 应用，让应用更加安全。")]),t._v(" "),v("h2",{attrs:{id:"一、csrf"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、csrf"}},[t._v("#")]),t._v(" 一、CSRF")]),t._v(" "),v("p",[t._v("跨站请求伪造，主要利用"),v("strong",[t._v("form 表单不存在跨域，而且会携带 form action 的地址的 cookie")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"攻击条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#攻击条件"}},[t._v("#")]),t._v(" 攻击条件")]),t._v(" "),v("ol",[v("li",[t._v("你在浏览器内访问了攻击者想要获取你信息的网站（如银行网站）")]),t._v(" "),v("li",[t._v("你在同一浏览器内访问了攻击者的网站。")]),t._v(" "),v("li",[t._v("攻击者通过隐藏的 form 表单，action 指向你访问过的网站的一个 url（可能是一个付款接口，也可能是一个），这个请求会携带银行网站的 cookie（此 cookie 中包含了你的信息），冒充你的名义发起请求，致使你的信息泄露或者财产损失。")])]),t._v(" "),v("h3",{attrs:{id:"解决方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),v("p",[t._v("原始表单在生成时添加一个隐藏的 input，value 为一个随机序列号，后端将序列号存储在数据库中，提交时序列号一起提交给后台，后台会验证该表单的序列号是否为后端生成的，攻击者的 form 是无法获取后台生成的序列号，所以。")]),t._v(" "),v("h2",{attrs:{id:"二、xss"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、xss"}},[t._v("#")]),t._v(" 二、XSS")]),t._v(" "),v("p",[t._v("主要利用在表单中插入 js 脚本，在其他用户访问该页面时，以你的名义发送请求。")]),t._v(" "),v("h3",{attrs:{id:"攻击条件-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#攻击条件-2"}},[t._v("#")]),t._v(" 攻击条件")]),t._v(" "),v("ol",[v("li",[t._v("这个主要是在于"),v("strong",[t._v("攻击者在网站的表单中输入了可以被浏览器执行的 html，css，javascript 等代码，浏览器解析行内脚本的方式决定了它在看到字符串 "),t._v(" 时，会将其当成结束的 "),t._v("\n标签。想避免这个问题，只需要转义字符“\\”")]),t._v("。")]),t._v(" "),v("li",[t._v("前端和服务端在没有识别的情况下直接存入数据库中。")]),t._v(" "),v("li",[t._v("当网站其他人访问这个攻击者的博客页面时，服务端将数据库中的代码包含在 html 中发送给前端，浏览器在解析 html 时直接解析了攻击者的代码。")])]),t._v(" "),v("h3",{attrs:{id:"解决方法-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决方法-2"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),v("p",[t._v("将所有用户输入的特殊符号如 < > = 等全部编码，用 unicode 编码代替。")]),t._v(" "),v("h2",{attrs:{id:"三、sql-注入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、sql-注入"}},[t._v("#")]),t._v(" 三、SQL 注入")]),t._v(" "),v("p",[t._v("主要利用在输入表单中输入可操作数据库的 sql 语句。")]),t._v(" "),v("h3",{attrs:{id:"攻击条件-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#攻击条件-3"}},[t._v("#")]),t._v(" 攻击条件")]),t._v(" "),v("ol",[v("li",[t._v("这个主要是在于"),v("strong",[t._v("攻击者在网站的表单中输入了可以被服务器执行的 SQL 代码")]),t._v("。")]),t._v(" "),v("li",[t._v("前端和服务端在没有识别的情况下直接存入数据库中。")]),t._v(" "),v("li",[t._v("服务端存入数据库需要编写 SQL 语句，那么攻击者输入的 SQL 代码就会劫持服务端的 SQL 代码，攻击者就可以对数据库做 删除、修改、新增等攻击操作。")])]),t._v(" "),v("h3",{attrs:{id:"解决方法-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决方法-3"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),v("ol",[v("li",[t._v("将所有用户输入的特殊符号如 < > = 等全部编码，用 unicode 编码代替。")]),t._v(" "),v("li",[t._v("后端使用 orm。")])]),t._v(" "),v("h2",{attrs:{id:"四、点击劫持"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、点击劫持"}},[t._v("#")]),t._v(" 四、点击劫持")]),t._v(" "),v("p",[t._v("通过透明化跟随鼠标，劫持用户点击操作。")]),t._v(" "),v("h3",{attrs:{id:"攻击手段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#攻击手段"}},[t._v("#")]),t._v(" 攻击手段")]),t._v(" "),v("p",[t._v("主要是利用视频、按钮、图片等引诱被攻击者点击。实际点击的是上一层透明化的元素，这种方法造成的后果不是很严重。")]),t._v(" "),v("h3",{attrs:{id:"解决方法-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决方法-4"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),v("ol",[v("li",[t._v("客户端尽量不要点击有诱惑性的按钮和图片。")]),t._v(" "),v("li",[t._v("后端添加 HTTP 响应头 "),v("code",[t._v("X-Frame-Options")]),t._v(". "),v("code",[t._v("X-Frame-Options")]),t._v("有三个可选值：\n"),v("ul",[v("li",[t._v("DENY:浏览器会拒绝当前页面加载任何 frame 页面。")]),t._v(" "),v("li",[t._v("SAMEORIGIN: frame 页面的地址只能为同源域名下的页面。")]),t._v(" "),v("li",[t._v("ALLOW-FROM origin : 允许 frame 加载的页面地址。")])])])]),t._v(" "),v("h2",{attrs:{id:"中间人攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击"}},[t._v("#")]),t._v(" 中间人攻击")]),t._v(" "),v("p",[t._v("攻击者同时连接客户端和服务端，并让对方认为连接是安全的，但是实际上整个通信过程都被中间人完全掌控了。")]),t._v(" "),v("h3",{attrs:{id:"解决方法-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决方法-5"}},[t._v("#")]),t._v(" 解决方法")]),t._v(" "),v("p",[t._v("由于对称加密和非对称加密，混合加密技术都不能有效的防止中间人攻击，因为中间人可以轻易获取首次传输的密钥。\n"),v("strong",[t._v("https")]),t._v(" 作为防止中间人攻击的终极手段，引入了"),v("code",[t._v("证书机制")]),t._v("解决了客户端和服务端的信任问题。")])])}),[],!1,null,null,null);a.default=s.exports}}]);