(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{421:function(t,v,_){"use strict";_.r(v);var T=_(24),s=Object(T.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("p",[t._v("本文主要介绍 HTTP、HTTP1.0、HTTP1.1、HTTP2 的区别")]),t._v(" "),_("h2",{attrs:{id:"http-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[t._v("#")]),t._v(" HTTP 协议")]),t._v(" "),_("p",[_("code",[t._v("超文本传输协议")]),t._v(" 是互联网上应用最为广泛的一种网络协议，所有的 www 文件都必须遵守这个标准，默认使用 80 端口， HTTP 客户端发起一个请求，建立一个到服务器指定端口的 TCP 连接。"),_("br"),t._v("\nHTTP 是在 TCP/IP 通信协议上建立的，HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性。\n"),_("code",[t._v("HTTP")]),t._v(" 使用的是 "),_("strong",[t._v("请求-响应")]),t._v("的方式，不仅在请求时先建立连接，而且需要客户端向服务器发出请求后，服务端才能回复数据。 HTTP1.0 、HTTP1.1、HTTP2.0 都是基于 HTTP 协议上做进一步优化的。")]),t._v(" "),_("h2",{attrs:{id:"http1-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" HTTP1.0")]),t._v(" "),_("p",[t._v("HTTP 协议老的标准是 HTTP/1.0，为了提高系统的效率，HTTP 1.0 规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成请求处理后立即断开 TCP 连接，服务器不跟踪每个客户也不记录过去的请求。")]),t._v(" "),_("h3",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("p",[t._v("支持浏览器与服务器之间通信，并通过对返回值的整合，梳理出适合处理的 http 请求报文。")]),t._v(" "),_("h3",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("ol",[_("li",[_("code",[t._v("请求独立")]),t._v(" "),_("strong",[t._v("每次请求都要重新建立一个连接")]),t._v("，走一遍 TCP 三次握手->发请求->返回请求结果->四次挥手关闭连接。每个 HTML 页面渲染的时候，会将 link、script、img 等地址对应建立连接，如果页面资源过多，访问一个包含有许多图像的网页文件的整个过程包含了多次请求和响应，每次请求和响应都需要建立一个单独的连接，每次连接只是传输一个文档和图像，上一次和下一次请求完全分离。即使图像文件都很小，但是客户端和服务器端每次建立和关闭连接却是一个相对比较费时的过程，并且会严重影响客户机和服务器的性能。当一个网页文件中包含 JavaScript 文件，CSS 文件等内容时，也会出现类似上述的情况。")]),t._v(" "),_("li",[_("code",[t._v("带宽延迟")]),_("br"),t._v("\n客户端是依据域名来向服务器建立连接，一般 PC 端浏览器会针对单个域名的 server 同时建立 6 ～ 8 个连接，手机端的连接数则一般控制在 4 ～ 6 个。显然连接数并不是越多越好，资源开销和整体延迟都会随之增大。"),_("strong",[t._v("连接无法复用会导致每次请求都经历三次握手和慢启动")]),t._v("。")])]),t._v(" "),_("h2",{attrs:{id:"http1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" HTTP1.1")]),t._v(" "),_("p",[t._v("为了克服 HTTP 1.0 的一个请求一个独立连接，tcp 不能复用的缺点，HTTP 1.1 支持持久连接（HTTP/1.1 的默认模式使用带流水线的持久连接），通过 http 头部 connection keep-alive，在一个 TCP 连接上，只要这个 TCP 连接不断开，那么就可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟。"),_("strong",[t._v("一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接")]),t._v("。"),_("strong",[t._v("HTTP 1.1 还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间")]),t._v("。")]),t._v(" "),_("p",[t._v("在 http1.1，request 和 response 头中都有可能出现一个 connection 的头，此 header 的含义是当 client 和 server 通信时对于长链接如何进行处理。\n"),_("strong",[t._v("在 http1.1 中，client 和 server 都是默认对方支持长链接的")]),t._v("， 如果 client 使用 http1.1 协议，但又不希望使用长链接，则需要在 header 中指明 connection 的值为 close；如果 server 方也不想支持长链接，则在 response 中也需要明确说明 connection 的值为 close。不论 request 还是 response 的 header 中包含了值为 close 的 connection，都表明当前正在使用的 tcp 链接在当天请求处理完毕后会被断掉。以后 client 再进行新的请求时就必须创建新的 tcp 链接了。")]),t._v(" "),_("p",[t._v("HTTP 1.1 在继承了 HTTP 1.0 优点的基础上，也克服了 HTTP 1.0 的性能问题。HTTP 1.1 通过增加更多的请求头和响应头来改进和扩充 HTTP 1.0 的功能。如，"),_("strong",[t._v("HTTP 1.0 不支持 Host 请求头字段")]),t._v("，WEB 浏览器无法使用主机头名来明确表示要访问服务器上的哪个 WEB 站点，这样就无法使用 WEB 服务器在同一个 IP 地址和端口号上配置多个虚拟 WEB 站点。"),_("strong",[t._v("在 HTTP 1.1 中增加 Host 请求头字段后")]),t._v("，WEB 浏览器可以使用主机头名来明确表示要访问服务器上的哪个 WEB 站点，这才实现了在一台 WEB 服务器上可以在同一个 IP 地址和端口号上使用不同的主机名来创建多个虚拟 WEB 站点。HTTP 1.1 的持续连接，也需要增加新的请求头来帮助实现，例如，"),_("code",[t._v("Connection")]),t._v("请求头的值为"),_("code",[t._v("Keep-Alive")]),t._v("时，客户端通知服务器返回本次请求结果后保持连接；"),_("code",[t._v("Connection")]),t._v("请求头的值为"),_("code",[t._v("close")]),t._v("时，客户端通知服务器返回本次请求结果后关闭连接。"),_("strong",[t._v("HTTP 1.1 还提供了与身份认证、状态管理和 Cache 缓存等机制相关的请求头和响应头")]),t._v("。HTTP/1.0 不支持文件断点续传，"),_("code",[t._v("<code>RANGE:bytes</code>")]),t._v("是 HTTP/1.1 新增内容，HTTP/1.0 每次传送文件都是从文件头开始，即 0 字节处开始。"),_("code",[t._v("<code>RANGE:bytes=XXXX</code>")]),t._v("表示"),_("strong",[t._v("要求服务器从文件 XXXX 字节处开始传送，这就是我们平时所说的断点续传")]),t._v("！")]),t._v(" "),_("p",[t._v("由上，HTTP/1.1 相较于 HTTP/1.0 协议的区别主要体现在：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("缓存处理, "),_("code",[t._v("新增强缓存和协商缓存请求头")])])]),t._v(" "),_("li",[_("p",[t._v("带宽优化及网络连接的使用, "),_("code",[t._v("增加长连接,多个请求可以在同一个连接中发送")])])]),t._v(" "),_("li",[_("p",[t._v("错误通知的管理， "),_("code",[t._v("新增状态码，极大丰富了 返回码的含义")])])]),t._v(" "),_("li",[_("p",[t._v("消息在网络中的发送， "),_("code",[t._v("链接可以并行发送，但是返回时按发送顺序返回，端点续传")])])]),t._v(" "),_("li",[_("p",[t._v("互联网地址的维护 "),_("code",[t._v("新增host字段，可以识别多个域名对应统一个ip地址，方便nginx根据域名做转发。")])])]),t._v(" "),_("li",[_("p",[t._v("安全性及完整性 "),_("code",[t._v("新增身份验证 Authorition 字段")])])]),t._v(" "),_("li",[_("p",[t._v("RestFull api 指出 "),_("code",[t._v("新增多种操作资源的方法 DELETE、PATCH、PUT、HEAD等")])])])]),t._v(" "),_("h2",{attrs:{id:"http2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),_("blockquote",[_("p",[t._v("HTTP2 在 HTTP1.1 的基础上做了大幅度的改版，极大的提升了请求速度，也为网站性能优化提供了新的方向。")])]),t._v(" "),_("ol",[_("li",[t._v("增加二进制分帧。")]),t._v(" "),_("li",[t._v("首部压缩。\n"),_("ul",[_("li",[t._v("将首部字段也压缩，这样就可以减小传输的流量")])])]),t._v(" "),_("li",[t._v("流量控制。")]),t._v(" "),_("li",[t._v("多路复用。\n"),_("ul",[_("li",[t._v("共享 TCP 连接,一个 TCP 连接可以同时并发多个请求。")])])]),t._v(" "),_("li",[t._v("请求优先级\n"),_("ul",[_("li",[t._v("css > js > jpg")])])]),t._v(" "),_("li",[t._v("服务器推送\n"),_("ul",[_("li",[t._v("如果客户端请求 html，则会将 html，以及 html 内部可能用到的 css，js 一起返回，减少二次请求时间。")])])])]),t._v(" "),_("h2",{attrs:{id:"https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),_("blockquote",[_("p",[t._v("HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。 现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。")])]),t._v(" "),_("ol",[_("li",[t._v("TCP 三次同步握手")]),t._v(" "),_("li",[t._v("客户端验证服务器数字证书")]),t._v(" "),_("li",[t._v("DH 算法协商对称加密算法的密钥、hash 算法的密钥")]),t._v(" "),_("li",[t._v("SSL 安全加密隧道协商完成")]),t._v(" "),_("li",[t._v("网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。")])]),t._v(" "),_("h3",{attrs:{id:"https-请求流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-请求流程"}},[t._v("#")]),t._v(" HTTPS 请求流程")]),t._v(" "),_("ol",[_("li",[t._v("客户端发起 HTTPS 请求")])]),t._v(" "),_("p",[t._v("这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("服务端的配置")])]),t._v(" "),_("p",[t._v("采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。")]),t._v(" "),_("p",[t._v("这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("传送证书")])]),t._v(" "),_("p",[t._v("这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等，此时使用非对称加密，由于非对称加密算法比较消耗性能，所以在传输"),_("strong",[t._v("公钥和客户端的随机值")]),t._v("之后，使用对称加解密算法。")]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("客户端解析证书")])]),t._v(" "),_("p",[t._v("这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。")]),t._v(" "),_("p",[t._v("如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。")]),t._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[t._v("传送加密信息")])]),t._v(" "),_("p",[t._v("这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。")]),t._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[t._v("服务端解密信息")])]),t._v(" "),_("p",[t._v("服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行"),_("strong",[t._v("对称加密")]),t._v("，所谓对称加密就是"),_("strong",[t._v("加解密用同一串私钥")]),t._v("，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。")]),t._v(" "),_("ol",{attrs:{start:"7"}},[_("li",[t._v("传输加密后的信息")])]),t._v(" "),_("p",[t._v("这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。")]),t._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[t._v("客户端解密信息")])]),t._v(" "),_("p",[t._v("客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。")]),t._v(" "),_("p",[_("strong",[t._v("SSL 证书是在服务端配置，一般情况下会在 nginx 中配置。")])]),t._v(" "),_("h2",{attrs:{id:"https-与-http-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https-与-http-的区别"}},[t._v("#")]),t._v(" HTTPS 与 HTTP 的区别")]),t._v(" "),_("ol",[_("li",[t._v("HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源.")]),t._v(" "),_("li",[t._v("HTTP 的端口号是 80，HTTPS 是 443 端口。")]),t._v(" "),_("li",[t._v("HTTPS "),_("strong",[t._v("需要到 CA 申请证书")]),t._v("，一般免费证书很少，需要交费,使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。")]),t._v(" "),_("li",[t._v("HTTPS 的连接很简单，是无状态的,而且是"),_("strong",[t._v("明文传输")]),t._v("；HTTPS 协议是由 "),_("strong",[t._v("SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协")]),t._v("议，比 HTTP 协议安全。")]),t._v(" "),_("li",[t._v("HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包.")])])])}),[],!1,null,null,null);v.default=s.exports}}]);